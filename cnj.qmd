
---
title: "Visualizaci√≥n de Data"
format:
  html:
    code-fold: true
    toc: true
    number-sections: true
    df-print: paged
---

# Resumen del Dataset: N√∫mero de causas ingresadas, resueltas y en tr√°mite a nivel nacional

## üìå T√≠tulo y prop√≥sito
- **Nombre del dataset:** N√∫mero de causas ingresadas, resueltas y en tr√°mite a nivel nacional (√°mbitos COIP, COGEP y Constitucional).  
- **Objetivo:** Mostrar estad√≠sticas judiciales de Ecuador sobre cu√°ntas causas se han **ingresado**, **resuelto** o se encuentran **en tr√°mite**, desglosadas por materia, tipo de acci√≥n, delito, provincia, cant√≥n, judicatura e instancia.

---

## ‚è± Cobertura temporal y actualizaci√≥n
- **Per√≠odo:** Desde **2017** hasta la fecha de corte.  
- **√öltima actualizaci√≥n:** **17 de septiembre de 2025**.  
- **Periodicidad:** **Mensual** (se actualiza cada mes).  

---

## üèõ Fuente y autor√≠a
- **Organismo responsable:** Consejo de la Judicatura de Ecuador.  
- **Departamento:** Direcci√≥n Nacional de Estudios Jurim√©tricos y Estad√≠stica Judicial.  
- **Licencia:** Creative Commons Attribution (CC-BY).  

---

## üìä Variables destacadas
El dataset incluye informaci√≥n desagregada en los siguientes campos:

- **A√±o** y **Mes**  
- **Materia** (penal, constitucional, administrativo, etc.)  
- **Tipo de acci√≥n / clase de causa**  
- **Delito** (cuando aplica)  
- **Provincia** y **Cant√≥n**  
- **Judicatura** e **Instancia**  
- **N√∫mero de causas**:  
  - Ingresadas  
  - Resueltas  
  - En tr√°mite  

---

## üìä Carga del Dataset

```{python}
import pandas as pd
import altair as alt

# Ruta local del archivo .ods
file = "/Users/usr-s3c/Documents/Maestria_YTech/Machine-Learning/cnj.csv"
# Leer la primera hoja del archivo
df = pd.read_csv(file, sep=";", low_memory=False)

# Mostrar las primeras filas
print(df.head(20))
```

```{python}
# Mostrar nombres de todas las columnas
print(df.columns.tolist())

```


```{python}
print("N√∫mero de columnas:", len(df.columns))

```


```{python}
print(df.info())
```


```{python}
df.head(20)
```

## üìä Top 10 de Delitos Comunes en el Pais

```{python}

# --- Agregacion y Top 10 ---
top_delitos = (df.groupby('Delito', as_index=False)['Ingreso']
                 .sum()
                 .sort_values('Ingreso', ascending=False)
                 .head(10))

# (Opcional) ver tabla en consola
print(top_delitos.to_string(index=False))

# --- Grafica ---
bar = alt.Chart(top_delitos).mark_bar().encode(
    y=alt.Y('Delito:N', sort='-x', title='Delito'),
    x=alt.X('Ingreso:Q', title='Causas (Ingreso)'),
    tooltip=['Delito', 'Ingreso']
).properties(
    title='Top 10 de causas mas comunes por Delito (segun Ingreso)',
    width=700,
    height=350
).interactive()

labels = bar.mark_text(align='left', dx=3).encode(text='Ingreso:Q')

(bar + labels)
```



## üìä Top 10 de las Provincias mas violentas


```{python}

# Asegurar limpieza de texto
df['Delito'] = df['Delito'].fillna('SIN ESPECIFICAR').astype(str).str.strip()
df['Provincia'] = df['Provincia'].astype(str).str.strip()
df['Ingreso'] = pd.to_numeric(df['Ingreso'], errors='coerce').fillna(0)

# Filtrar solo el delito 140 ASESINATO
df_asesinato = df[df['Delito'].str.upper().str.contains("140 ASESINATO")]

# Agrupar por provincia y ordenar
top5_provincias = (df_asesinato.groupby('Provincia', as_index=False)['Ingreso']
                   .sum()
                   .sort_values('Ingreso', ascending=False)
                   .head(5))

print(top5_provincias.to_string(index=False))  # tabla en consola

# Gr√°fica
chart = alt.Chart(top5_provincias).mark_bar().encode(
    x=alt.X('Ingreso:Q', title='Causas (Ingreso)'),
    y=alt.Y('Provincia:N', sort='-x', title='Provincia'),
    tooltip=['Provincia','Ingreso']
).properties(
    title='Top 5 provincias con mas causas por delito: 140 ASESINATO',
    width=600,
    height=300
).interactive()

labels = chart.mark_text(align='left', dx=3).encode(text='Ingreso:Q')

(chart + labels)
```





```{python}
# Asegurar limpieza de texto
df['Delito'] = df['Delito'].fillna('SIN ESPECIFICAR').astype(str).str.strip()
df['Provincia'] = df['Provincia'].astype(str).str.strip()
df['Ingreso'] = pd.to_numeric(df['Ingreso'], errors='coerce').fillna(0)

# Filtrar solo el delito 140 ASESINATO
df_asesinato = df[df['Delito'].str.upper().str.contains("140 ASESINATO")]

# Identificar las top 5 provincias con m√°s casos acumulados
top5_provincias = (df_asesinato.groupby('Provincia', as_index=False)['Ingreso']
                   .sum()
                   .sort_values('Ingreso', ascending=False)
                   .head(5)['Provincia']
                   .tolist())

# Filtrar solo esas provincias
df_top5 = df_asesinato[df_asesinato['Provincia'].isin(top5_provincias)]

# Agrupar por a√±o y provincia
evolucion = (df_top5.groupby(['Anio','Provincia'], as_index=False)['Ingreso']
             .sum()
             .sort_values(['Provincia','Anio']))

print(evolucion.to_string(index=False))  # Tabla en consola

# Gr√°fica de evoluci√≥n
chart = alt.Chart(evolucion).mark_line(point=True).encode(
    x=alt.X('Anio:O', title='A√±o'),
    y=alt.Y('Ingreso:Q', title='Causas (Ingreso)'),
    color=alt.Color('Provincia:N', title='Provincia'),
    tooltip=['Anio','Provincia','Ingreso']
).properties(
    title='Evoluci√≥n por a√±o ‚Äî Delito 140 ASESINATO (Top 5 provincias)',
    width=500,
    height=400
).interactive()

chart
```


```{python}    
df = df.copy()
for c in ['Ingreso','Resuelta','Tramite']:
    df[c] = pd.to_numeric(df[c], errors='coerce').fillna(0)
df['Provincia'] = df['Provincia'].astype(str).str.strip()

# Provincias con mayor Resuelta (para ordenar/filtrar)
topN = 5
orden_prov = (df.groupby('Provincia', as_index=False)['Resuelta']
                .sum()
                .sort_values('Resuelta', ascending=False)
                .head(topN)['Provincia']
                .tolist())

# Subset y pasar a formato largo
subset = (df[df['Provincia'].isin(orden_prov)]
          .groupby('Provincia', as_index=False)[['Ingreso','Resuelta','Tramite']]
          .sum())

datos_long = subset.melt('Provincia', var_name='Estado', value_name='Causas')

# --- barras agrupadas (xOffset) ---
chart = alt.Chart(datos_long).mark_line(point=True).encode(
    x=alt.X('Provincia:N', sort=orden_prov, title='Provincia'),
    y=alt.Y('Causas:Q', title='N√∫mero de causas'),
    color=alt.Color('Estado:N', title='Estado'),
    xOffset='Estado:N',  # <--- Agrupa barras por Estado dentro de cada provincia
    tooltip=['Provincia','Estado','Causas']
).properties(
    title=f'Provincias vs n√∫mero de causas (Ingreso / Resuelta / Tramite) ‚Äî Top {topN}',
    width=600,
    height=450
)

chart

```